## **58.精读《Typescript2.0 - 2.9》**

> 写了一年以上的 TypeScript 开发者也需要刻意练习才能写的更好，使用时间与了解程度无关



## 精读

- 严格模式便捷检测代码解决方案：

  - 2.0 版本的 ts 提供了"非空断言标志符" `!.` 解决明确不会报错的情况，配置文件静态化，不需要抛出异常:

    ```js
    const config = {
      port: 8000
    }
    console.log(config!.port)
    
    ```

- TS 2.8 版本 支持条件类型语法： 

  ```js
  type TypeName<T> = T extends string ? "string"
  
  // 当 T的类型是string时，TypeName的表达式类型为string
  // 可以构造一个自动非空断言类型
  export type PowerPartial<T> = {
  	[U in keyof T]?: T[U] extends object ? PowerPatial<T[U]> : T[U]
  }
  ```



- `never` `object` 类型

  - 和`null` `undefined`特性一样， `never`等于是函数返回值中的 null 或者 undefined，他们都是子类型，比如类型 number 自带了 null 和 undefined 这两个子类型

- 增加了修饰类型

  - `readonly` 修饰符，被他修饰的变量无法修改

  - 2.8 版本，增加了 `-` `+`修饰修饰符，有点像形容词，readonly  就是 `+readonly` `-readonly`可以移除 readonly 只读的特性

  - `-?:` 可以移除可选类型，延伸出一种新类型: `Required<T>`, 将对象所有可选修饰移除，就变成了必选类型

    ```js
    type Required<T> = { [P in keyof T]-?: T[P] }
    ```

- 可以定义函数的 this 类型

  ```typescript
  function f(this: void) {
   // make sure `this` is unusable in this standalone function 
  }
  ```

- 引用、寻址支持通配符

  ```typescript
  declare module "*!text" {
  	const content: string;
  	export default content;
  }
  // 类型辐射到 
  import fileContent from "./xyz.txt!text";
  ```

  - 此特性最强是使用在拓展模块上，包括 tsconfig.json 模块查找也支持通配符，他的实现其实是创建一个一个文件， 通过`webpack.alias` 将引用指了过去

- 对类型修饰的增强

  ```typescript
  // TS2.1 对类型操作革命性更新，keyof可以拿到对象key的类型
  interface Person {
    name: string;
    age: number;
  }
  type K1 = typeof Person; // "name" | "age"
  // keyof 可以增强对象的类型
  type NewObjType<T> = { [P in keyof T]: T[P] }
  ```

  - `NewObjType`原封不动的将对象类型重新描述了一遍，其实有三处可拓展的地方
    - 左边： 可以通过`readonly`修饰，将对象的属性变成只读
    - 中间：将`:` 改成 `?:`，将对象所有属性改为可选
    - 右边： 比如套一层 Promise<T[P]> ，将对象的每个 key 的 value 类型覆盖

- 重点类型修饰拓展(以下类型全部定义在 lib.d.ts, 无需定义，可以认为是 ts 的 utils 工具库)

  - Readonly: 将对象的 key 全部设置为只读，或利用条件类型语法(三元表达式)实现递归设置只读
  - Partial：将对象的可以全部设置为可选
  - Pick<T, K>：从对象类型 T 中挑出一些属性 K，可以生成仅支持这两个 key 的新对象类型
  - Extract<T, U>: 是 Pick 的底层 Api，Pick 是挑选对象的某些 key，Extract 是挑选 key 中的 key
  - Record<K, U>：将对象某些属性转换成另一个类型，常见在回调场景，回调返回类型覆盖对象每一个 key 的类型，类型系统 Record 接口才能完成推导。
  - Exclude<T, U>: 将 T 中的 U 类型排除，与 Extract 功能相反
  - Omit<T, K>: 从对象 T 中排除 key 是 K 的属性，利用内置类型方便推导：`type Omit<T, K> = Pick<T, Exclude<keyof T, K>>`
  - NonNullable: 排除 T 的`null`与 `undefined`的可能性
  - ReturnType: 获取函数 T 返回值的类型
  - InstanceType: 获取一个构造函数类型的实例类型

- 对 Genrtator 和 async/await 的类型定义

  - `for...of`语法的异步迭代支持

    ```js
    async function f() {
      for await (const x of fn1()) { // fn1 返回值是可迭代对象，而且item类型都是Promise或者Generator
        console.log(x)
      }
    }
    // 对比写法
    async function f() {
      for(const x of await fn2()) { // await位置放置不同，本身是个异步函数，返回值是可迭代，但是每个item都不是异步的
        console.log(x)
      }
    }
    ```

- 泛型默认参数(伪方法重载)

  ```typescript
  export default function createStore(reducer, preloadedState, enhancer) {
    if(typeof preloadedState === 'function' && typeof enhancer === 'undefined') {
      enhancer = preloadedState;
      preloadedState = undefined;
    }
  }
  declare function createStore(
  	reducer: Reducer,
    preloadedState: PreloadedState,
    enhancer: Enhancer
  );
  declare function createStore(reducer,: Reducer, enhancer: Enhancer);
  ```

  - TS2.3 支持泛型默认参数，可以减少某些场景函数类型重载的代码量

    ```typescript
    declare function create(): Container<HTMLDivElement, HTMLDivElement[]>;
    declare function create<T extends HTMLElement>(element: T): Container<T, T[]>
    declare function create<T extends HTMLElement, U extends HTMLElement>(
    	elemnty: T,
      children: U[] 
    ): Container<T, U[]>;
    
    // 通过枚举表达了泛型默认值，以及U与T之间可能存在的关系，可以使用泛型默认参数解决
    declare function create<T extends HTMLElement = HTMLDivElement, U = T[]>(
    	element?: T,
      children?: U
    ): Container<T, U>;
    ```

- 动态 import (2.9 支持 import() 类型定义)

  ```typescript
  const zipUtil = await import("./utils/create-zip-file")
  
  const zipUtil: typeof import('./utils/create-zip-file') = await import("./utils/create-zip-file")
  ```

- Enum 类型支持字符串

  ```plain
  enum Colors ={
  	Red = 'RED',
  	Green = 'GREEN',
  	Blue = 'BLUE'
  }
  ```

- 自动类型推导

  - typeof && instanceof js 自动类型推导

  - ts `in`推导

    ```typescript
    interface A {
    	a: number;
    }
    interface B {
      b: string;
    }
    function foo(x: A | B) {
      if ("a" in x) {
        return x.a;
      }
      return x.b;
    }
    // 解决了object类型的自动推导问题，因为object既无法使用keyof也无法用instanceof判定类型，找到对象的特征就不需要强转断言了 as
    ```

    



### summary

- 新语法需要刻意练习和习惯新语法，慢慢消化，同时连接以往语法的上下文才能更好理解