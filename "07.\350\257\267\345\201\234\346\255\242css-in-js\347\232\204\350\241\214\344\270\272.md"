007.精读 请停止 css-in-js 的行为

# 表面 css-in-js, 其实是 CSS Module 和 styled-component 的争论

# styled-component

- styled-components 利用 ES6 的 tagged template 创建 react 纯样式组件， 消除人肉在 dom 和 css 之间做映射转换的痛苦

```plain
import React from 'react';

import styled from 'styled-components';

const Title = styled.h1`
	font-size: 1.5em;
	text-align: center;
	color: palevioletred;
`;
<Title>Hello World this is my first styled compoent</Title>
```

# css-module

- css-module 将 css 模块化，可以避免本模块样式被污染，而且还可以很方便的复用 css 代码

```plain
// 全局变量
:global(.className) {
	background-color: blue;
}

// 本地变量, 其他模块无法污染
.className {
	background-color: blue;
}

```

# react-css-modules 代码示例

```plain
import React from 'react';

import CSSModules from 'react-css-modules';

import styles from './styles';

class Table extends React.Component {
	render() {
		return <div styleName="table">
		<div className="row">
			<div styleName="cell">A0</div>
			<div styleName="cell">B0</div>
		</div>
	</div>
	}
}
export default CSSModule(Table, styles)
```

- 使用 react-css-modules， 可以方便覆盖本地变量的样式:

```plain
import customStyles from './table-custom-styles.css';
<Table styles={customStyles} />;
```

# CSS 本身缺陷

- 书写繁琐 (不支持嵌套)
- 样式容易冲突 (没用作用域概念)
- 缺少变量(不利于一键换主题)

- 社区方案 CSS 预处理器(SASS/LESS/Stylus)
- PostCSS --> CSS Module --> styled-component

# Styled-component 优缺点

- 优点： 使用成本低， 更适合跨平台
- 缺点： 缺乏拓展性

# css-modules 优缺点

- 优点： 可有效避免全局污染和样式冲突，最大化结合 CSS 生态和 JS 模块化
		 与 SCSS 对比，可以避免 className 的层级嵌套，只使用一个 className 就可以把所有样式定义好

- 缺点: 与组件库难结合， 会带来一些使用成本， 本地样式覆盖困难， 写到最后可能一直在使用:global 

# SCSS/LESS

- 自创语法雷同，格式不一致增加了无意义的学习成本(sugar)

# summary
- 解决方案没有绝对的优劣， 需要结合自身场景使用

- SCSS 使用频率或多一点