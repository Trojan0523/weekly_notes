## **035.精读《dob - 框架实现》.md**

> 数据流与框架的关系，有点像网络与人的关系

- 模块功能完整性和项目整体性的博弈
- 全局性增强，对整体性强要求的项目路友好，便于测试，因为不利于测试的 UI 和数据关系被抽离了
- 局部性强了，弱关联的项目友好，任何模块都 不依赖全局数据，自己完成所有功能



### 依赖追踪

- MVVM 核心是依赖追踪，其也分为两部分，分别是依赖收集和触发回调，两者结合就是 observe 函数，分开的话为 Reaction

  > reaction 通过 new 一个 Reaction 对象生成，通过 callback 进行依赖收集，同城会有其自身的 getter，收集完成会通过将收集的被观察者对象 dispatch 到 function 中

  - Reaction 一边监听到使用哪些变量，变量改变后执行回调函数

    ```js
    // Observe 利用 Reaction实现(简化版)
    function observe(callback) {
        const reaction = new Reaction({
            reaction.track(callback)
        })
        reaction.run()
    }
    ```

  - 收集完一轮之后触发 new Reaction 的回调，重新进行收集，然后执行 callback

- 依赖追踪值支持同步函数

  - getter/setter 执行时无法定位触发代码位于哪个函数，嵌套函数时会发生异常，这是因为采用的全局变量标记法，内层函数执行完后，实际作用域已经回到外层，依赖收集无法获取这个堆栈改变事件，异步回调 虽然在同一个函数体内，但是执行时机和执行顺序不一样，可能已经跳出当前任务队列，执行堆栈不同，收集不到正确的依赖

- 结合到 React

  - observe 如何到 render，类比到 react 都是同步函数，所以 render 函数 使用到的变量发生变动，对应的 render 函数就会重新执行实现 UI 刷新
  - 小技巧结合： 聚合生命周期， 替换 render 函数(数据流永远是的单向的)

- 避免在 View 中随意修改变量

  - 引入 Action 概念，在 Action 中执行变量修改，可以多次修改聚合成一次 render，不在 Actions 中修改的变量会抛出异常

- 有层次实现 debug

  - dob 核心记录 debug 信息，通过 StartDebug，然后 dob devtools 读取加工，强化 UI 信息，还可以通过额外信息采集，将 Action 与 UI 元素绑定，

  - 数据流需要一个 Provider 提供数据源，与 Connect 注入数据，将所有与数据流绑定的 UI 元素映射到 Debug UI

  - Debug 功能解耦，支持拓展 redux

    - 使用事件在所有 getter/setter 节点抛出相关信息，Debug 端订阅这些事件然后记录

      ```js
      event.on("get", info => {
          // 不在调试模式
          if(!globalState.useDebug) {
              return 
          }
          // 记录调用栈
      })
      // 支持的事件钩子
      /*
      get/set/deleteProperty/runInAction/startBatch/endBatch
      */
      ```

    - 关键生命周期节点，需要遵守调用顺序，

      - startBatch -> debugInActtion -> ...multiple nested startBatch and endBatch -> debugoutAction -> reaction -> observe

## summary

- 对于 dob 的分析本文是一些上层设计理念的描述，学习了解依赖注入实现流程。
- 下一篇框架使用，会站在使用者角度思考数据流