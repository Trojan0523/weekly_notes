# 237. 精读 TypeScript 4.5-4.6 新特性

> TS 不断更新的版本下，了解内置的工具类更新迭代十分重要，今天来看看 TS 新增的特性，看看部分对我们有用的特性

> [TS4.6 发布公告](https://devblogs.microsoft.com/typescript/announcing-typescript-4-6/)
> [TS4.5 发布公告](https://devblogs.microsoft.com/typescript/announcing-typescript-4-5/)

### Awaited 类型
- Awaited 可以将实际的 Promise 返回类型抽出来，实际上就是等待`Promise resolve`了之后拿到的类型
```ts
// A = string
type A = Awaited<string>

// B = number
type B = Awaited<Promise<Promise<number>>>

// C = boolean | number
type C = Awaited<boolean |Promise<number>>
```

### 捆绑的 dom lib 类型替换
- 开箱即用的 TS 类型，包含了所有 dom 的内置类型，比如可以直接使用的 Document 类型, window 类型等等，都是 TS 自带的，如果不想使用 TS 升级后带的 dom 内置类型，TS 提供了一个置顶 dom lib 的类型方案，在`package.json`声明 `@typeScript/lib-dom`即可 (这种情景比较少见，主要是做环境兼容性，所以其实建议一般不去做捆绑解除，直接使用)

```json
{
    "dependencies": {
        "@typescript/lib-dom": "npm/@types/web"
    }
}
```


### 模板字符串类型类型收窄
- 按照模板字符串在分支条件的时候做类型收窄，入参不做分支判断，相当于
```ts
export interface Success {
    type: `${string}Success`,
    body: string
}
export interface Error {
    type: `${string}Error`
    body: string
}
export function handler(r: Success | Error) {
    if (r.type === "HttpSuccess") {
        // 此时类型判断已经做了类型收窄，为Success类型
        let token = r.body
    }
}
//  => 等价于 做入参重载联合
export function handler(r: Success) { return r.body }
export function handler(r: Error) { return r.body }
```

### 新增 --module 2022
- esnext 可以保持 ts 版本的最新特性，但是如果要使用稳定的版本号又需要支持顶层 awaited 的特性，可以使用 es2022

### 尾递归优化
- 这个确实是戳到痛处了，以往在写 ts 类型递归的时候，如果嵌套的递归中同样存在需要递归的类型方法，很容易造成前栈和后栈的层级过深导致栈溢出(堆栈深度过高, TS2321 Error)
- 现在由于 ts 做了尾递归优化，不会因为堆栈过深而报错了，而是会正确返回结果，尾递归优化后，不会形成逐渐加深调用, 而是执行完后立即退出当前函数，堆栈数量不变
```ts
type multiNum<Num1 extends number, Num2 extends number, ResultArr extends unknown[] = []> = 
    Num2 extends 0
    ? buildArray<Num2>['length'] // length与 keyof buildArray<Num2, "", []>相比，堆栈深度过高
    : multiNum<Num1, subNum<Num2, 1>, [...buildArray<Num1>, ...ResultArr]>

type TrimLeft<T extends string> =
    T extends ` ${infer Rest}` ? TrimLeft<Rest> : T;

// error: Type instantiation is excessively deep and possibly infinite.
// 此时递归过深可能会导致无限循环
type Test = TrimLeft<"                                                oops">;

// 尾递归核心: 将递归变成while循环，不产生堆栈
```

### 支持变量 import type 声明
- 以往只能对导入的所有结构变量进行 type 声明，现在可以对单个变量级别 type 声明，对于同一文件中导出的 enum 和 static type 可以兼容了
- 对于独立模块构建时，可以安全抹去`BaseType`, 因为单模块构建的时候，无法感知文件内容，不特别置顶`type BaseType`, Ts 编译器无法识别其为类型变量

```ts
import type { BaseType, baseTyping } from './some-module' // 以往类型声明
// 现在支持变量级别的type声明
import { BaseType, type baseTyping } from './some-module'
```

### 类私有变量检查
- 支持类私有类型的检查
- 支持 `#name in obj`的判断
```ts
class Person {
    #name: string
}
class Person {
    #name: string;
    constructor(name: string) {
        this.#name = name
    }
    equals(other: unknown) {
        return other &&
            typeof other === "object" &&
            #name in other && // <- this is new
            this.#name = other.#name
    }
}
// 判断隐式要求了#name in other的other是Person实例化的对象，该语法仅可能存在于类中，还能进一步类型缩窄为Person类
```

### import 断言
- 支持导入断言提案 (前段时间 @antfu 还写了一个 import eager 支持不同语法的 vite 插件，对于非同质化语法提案给与了不同的支持)
```ts
import obj from "./something.json" assert { type: "json" }
```
- 支持动态 import 的断言
```ts
const obj = await import("./something.json", {
    assert: { type: "json" }
})
```
- js 提案进度也没有到 stage4 的地步 (进度：stage3, [import assert 提案链接](https://github.com/tc39/proposal-import-assertions))
- ts 该特性支持任意类型的断言，不关心浏览器的识别情况，所以断言一旦生效，就必须满足
    - 浏览器支持 (legacy)
    - 构建脚本支持   (babel)
- 就目前来看，构建脚本支持语法不统一, vite 对于导入类型的断言也不一致
```ts
import obj from './something.json'

// 自创语法 blob加载模式
const modules = import.meta.glob(
    './**index.tsx',
    {
        assert: { type: 'raw' }
    }
    
)
```
- 假设导入断言能在浏览器层面能实现，就不需要构建工具处理 import 断言了，假设完全依靠浏览器解析，一个前端工程起码有数千个资源文件，不做打包构建去加载实在是太慢了，所以还得慢慢等待工具的演进

### const 只读断言
```ts
const obj = {
    a: 1
} as const
obj.a = 2 // 报错，因为已经断言成常量了，相当于是readonly
```

### 片段自动补全增强
- 这个没什么好说的，最新版 TS 在 JSX 书写标签按回车后，会自动根据类型内容补全，开发体验增强

### 类型收窄对解构生效
- 解构后类型收窄依然生效
```ts
function foo(bar: Bar) {
    if (bar.a === '1') {
        bar.b // string
    } els {
        bar.b // number
    }
}
// 提前解构类型收窄一样生效
function foo(bar: Bar) {
    const { a, b } = bar
    if (a === '1') {
        b // string
    } else {
        b // number
    }
}
```

### 深度递归类型检查优化
- 以下赋值语句会异常，因为属性 prop 类型不匹配
```ts
interface Source {
    prop: string
}
interface Tag {
    prop: number
}
function check(source: Source, tag: Tag) {
    target = source 
    // Error 
    // 不能将类型“Source”分配给类型“Target”。
    // 属性“prop”的类型不兼容。
    // 不能将类型“string”分配给类型“number”。ts(2322)
}
// 假设传入类型为泛型，做赋值会导致泛型无限递归，为了保证不会出错，做了深度判断，过深的递归会终止判断
// 对于一下的错误无法识别
interface Foo<T> {
    prop: T
}
declare let x: Foo<Foo<Foo<Foo<Foo<Foo<string>>>>>>;
declare let y: Foo<Foo<Foo<Foo<Foo<string>>>>>;

x = y;
```
- 优化核心: TS 可以根据代码结构解析哪些是"非常抽象/启发式"写法导致的递归，哪些是一个个枚举产生的递归，对后者的递归深度检查进行豁免

### 增强的索引推导 [太复杂了,解释不来~~, 扔个链接](https://devblogs.microsoft.com/typescript/announcing-typescript-4-6/#indexed-access-inference-improvements)


### 参数控制流分析
- 也是比较复杂的用法，如果把参数类型定义为元组或并列枚举，潜在存在一个运行时的类型收窄，参数为 a 时,第二个参数类型就为`number`, 第一个参数为 b 时，第二个参数类型就为`string`
- 类型推导必须从前到后, 参数是从左到右传递的，所以是前面推导出后面，不能是后面向上推导
```ts
type Func = (...args: ['a' number] | ['b, string]) => void;

const f1: Func = (kind, payload) => {
    if (kind === 'a') {
        payload.toFixed() // 'payload'被自动推导为number类型
    } else if (kind === 'b') {
        payload.toUppercase() // 'payload'被自动推导为string
    } 
}
f1('a', 42)
f1('b', 'hello')
```

### 移除 JSX 编译时产生的非必要代码 (偏编译底层，无需特意记住)
- 对于 JSX 标签，编译后会产生一个最后的 void 0 作为参数，现在在编译阶段会去除，减少打包的体积

```tsx
export const el = <div>foo</div>
//  before
export const el = _jsx("div", { children: "foo" }, void 0)
// after
export const el = _jsx("div", { children: "foo" })
```

### JSDoc 校验提示
- JSDoc 注释与代码时分离的，不断迭代容易与实际代码产生分歧
- 现在的 TS 可以对命名、类型不一致做提示了，所以用了 TS JSDoc 就可以不用了

```ts
/**
 * @param x {number} 第一个参数
 * @param y {number} 第二个参数
 */ 
function add(a, b) {
    return a + b
}
// 这个时候传入的参数名称有变动不匹配，TS会做出提示，所以能用TS的时候可以减少这种入参的注释了
```

## summary
- TS 4.5 4.6 版本其实更多的是完善对泛型操作的工作，对于基础的语法已经没有很大的变动了，但是泛型还是十分的复杂，希望以后能对泛型做更多的支持。
- 完。