## **032.精读《React Router4.0 进阶概念》.md**



> React-router 4.0 正式发布，生态逐渐完善，完美结合工具介绍



### 工具

- 代码分割 react-loadable ，做到路由级别动态加载

  ```js
  const AsyncHome = Loadable({
      loadder: () => import('../components/Home/home')
      loading: LoadingPage
  })
  <Route exact path="/" component={AsyncHome} />
  ```

  - 转场动画 React Router Transition

    ```jsx
    <Router>
        <AnimatedSwitch
            atEnter={{ opacity: 0 }}
            atLeave={{ opacity: 0 }}
            atActive={{ opacity: 1 }}
            classMame="switch-wrapper"
            >
        	<Route exact path="/" component={Home} />
            <Route exact path="/about/" component={About} />
            <Route exact path="/etc/" component={Etc} />
        </AnimatedSwitch>
    </Router>
    ```

- 滚动条复位 页面回退将滚动条恢复到页面最顶部，路由作为组件，可以利用组件中的生命周期`componentDidUpdate`简单完成滚动条复位

  ```jsx
  <Router history={history}>
  	<ScrollToTop>
      	<div>
          	<Switch>
              	<Route exact path="/" component={Home} />
         		 	<Route exact path="/about/" component={About} />
          		<Route exact path="/etc/" component={Etc} />
              </Switch>
          </div>
      </ScrollToTop>
  </Router>
  @WithRouter
  class ScrollToTop extends Component {
      componentDidUpdate(prevProps) {
          if(this.props.location !== prevProps.location) {
              window.scrollTo(0,0)
          }
      }
      render() {
          return this.props.children
      }
  }
  ```

- 嵌套路由 通过组件 Route 嵌套完成

  ```jsx
  <Router path={`${this.props.match.url}/:id`} component={NestComponent} />
  ```

- 服务端渲染，浏览器端需要专门入口文件，使用 BrowserRouter 和 location 对接

  ```jsx
  <BrowserRouter>
  	<App />
  </BrowserRouter>
  ```

  - 服务器端 BrowserRouter 变成 StaticRouter 后续路由渲染逻辑双端通用(req.url 传后端)

### 思考

- 变动来源： URL 资源理解的变化
- URL 为参数，在 React 中为一个 props
- 单页应用对比多页应用，一个网站整体思想，网址只不过是状态的切换
- 传统开发思路：为每个 URL 编写独立页面或者模块
- 新思路，URL 姿势一个状态，代码读取状态的切换做不同的展现。展现完全不同时，就可以看做传统开发页面切换，很符合 React 视图层的思想 Fn(state) -> UI

## summary

- 放下对页面的刻板执念，有的只是状态的切换