# 单页应用数据流解决方案探索

# 管理数据原因

- 前期前端只负责将请求的数据展示出来就行了，随着前端越来越复杂， 框架内聚性不断在增强， 数据流由分到合再到分，数据流逐渐从框架中解绑，形成一套通用体系

- 类型： 双向数据流、 单向数据流、 响应式数据流
  对应： Mobx， Redux， Rxjs

# 内容概要
- Reactive 数据封装
- 数据源 数据变更的归一
- 局部和全局状态的归一
- 分形思想
- action 分散执行(异步数据请求)
- app 级数据处理， 推荐前端 orm

# 核心：数据统一经过数据流处理中心(这里代指数据流管理框架【状态管理工具】)

# 推动史
- 面向对象 
- 函数式
- 响应式

# 分形思想

- 优点： 

1.组件和数据流融为整体，与外部数据流隔离，甚至将数据处理融合到数据管道中
2. 便于组件复用, 数据流作为组件的一部分
3. 创建局部数据等于创建全军数据，代码调试可局部可整体 ，更灵活

# 数据形态， 是原始数据还是视图数据？

- 区分业务场景， 偏向后端工作的中台场景，前端数据层很薄，所以原始数据不会放在前端

# 从原始数据到视图数据的处理过程放哪？

- 文中推荐放在视图层处理，业务组件推荐使用内部数据流操作 放数据流处理中心(store) 	

# summary

- 得根据不同的业务场景进行对数据流类型的选型和数据形态的选型 ，每一个数据流类型都会适合不同的业务场景。