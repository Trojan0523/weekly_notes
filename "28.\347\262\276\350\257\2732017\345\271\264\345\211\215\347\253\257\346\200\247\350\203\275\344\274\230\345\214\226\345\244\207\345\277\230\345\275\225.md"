## **028.精读《2017 前端性能优化备忘录》.md**

> 性能指标分析带来全新挑战，取决于 设备、浏览器、协议、网络类型(CDN, ISP, cache, Proxy, firwall, loadbalancer, server)

- 上一年 D2 对于性能指标分析给与了几套方案(定义性能指标，采集以及提供性能优化工具链)，可以回溯参考，通常个人使用 Lighthouse，浅层分析

### 优化策略， 模型，方法

- 制定目标： 没有目的就不要提优化，优化是需要解决某些性能问题提出的
  1. 网站加载速度快于他人 20%， 启动渲染时间，首次有效渲染时间，交互时间(performancejs)
  2. 控制响应事件 100ms 之内，控制帧率在 60fps/s 不让用户视觉上觉得页面卡顿,用户初始操作 100ms 内提供犯规，也就是页面在 50ms 的时候需要将控制权交还给主线程
  3. 控制首次有效渲染在 1.25s，speedIndex 在 1000
- 环境搭建
  - 构建工具选型， 很重要一点给自己的话，不要过度使用酷炫的技术栈，必须坚持选择适合开发环境的工具，运行速度足够快就行
  - 渐进增强式的前端框架，设计构建核心体验，再完善作为高性能浏览器设计高级特性相关特性，同时可以选择支持 SSR 的框架
  - AMP 或者 Instant Articles
  - 合理使用 CDN， 根据网络动态数据量， 将静态网站生成工具生成一个静态版本，放置 cdn 中，避免数据库请求
- 优化构建
  - 确定优先级， 对于静态资源划分级别，区分基础核心内容，高性能浏览器设计升级体验
  - 使用`cutting-the-mustard`： 实现不同类型浏览器载入不同类型核心型资源，页面加载时载入 Core 资源，某些不需要操作 DOM 的 jS 文件使用 defer,在 DomContentLoaded 后载入 Enhancement 资源，在 Load 事件后载入额外资源
  - micro-optimization && progressive-booting
    - skeleton screens replace loading-indicator
    - booting App inital rendering tech: tree-shaking, code- spliting
    - base on sever side rendering, add precompling(预编译)
    - optimizejs 加快初始加载速度
    - 渐进启动，服务端渲染直出加快完成首次有效渲染，通过少量 js 代码执行让交互时间接近首次有效渲染时间
  - 正确设置 HTTP cache header: 对于缓存响应头设置(expires, cache-control, max-age), 协商缓存和强缓存
  - 减少第三方库使用，异步加载 JS
  - 合理优化图片， svg，雪碧图渐渐弃用， 图像压缩
  -  优化 web 字体， 使用 web fonts？ 有待商榷， 浏览器兼容和字体加载替换闪屏问题，前面精读文章有分析(web font)
  - 快速推送 critical css 文件， 用于首屏渲染的 CSS 整合一个文件，以 style 行内形式内嵌，减少渲染路径，但是 critical css 文件文件大小不能大于 14kb(http 限制)，所以引出使用带缓存 http2 服务器传输推送机制
  - tree-shaking code-spliting webpack 
  - 渲染性能提升 css-containment 方式隔离性能开销大的组件， 推荐使用 css:will-change 属性，某些动画默认开启 GPU 加速和在合成线程中直接操作(结合极客时间浏览器专栏- 分层合成机制，CSS 动画比 JS 高效) 
  - 优化网络环境，加快网络传输速度，服务器节点
    - dns-prefetch：浏览器后台进程执行一次 DNS 查询
    - preconnect 浏览器后台进程发起一次握手(DNS,TCP,TLS)
    - prefetch 浏览器发起资源请求
    - prerender 浏览器在后台进程渲染出特定页面
    - preload， 预加载，不执行资源预先拿到资源
- HTTP/2
  - 部署 HTTP/2 载入大模块和并行小模块之间找到平衡点
  - 确保服务器安全性，排除网站已知漏洞，检查证书实效性
  -  服务器和 CDN 是否支持 HTTP/2 nginx 部署 http2
  - brotli 或 Zopfli 压缩算法
  - OCSP stapling, 减少 TLS 握手时间，加速 TLS 握手过程
  - 使用 IPV6，其自带 NDP 以及路由优化， 网站载入速度提升
  - HPACK 压缩算法，执行对 HTTP 响应头压缩
  - 使用 service worker
- 测试和监控
  - 监控警告： 使用监控工具对混合内容出现的警告监控
  - JS 错误监控，上报(sentryjs)
  - 使用 DevTools 调试功能，排查渲染性能问题，performance 火焰图，network 中的 timeline 时间线分析
  - 代理浏览器和过时浏览器测试
  - 持续监控 使用个人 WebPageTest 实例， 建立自动预警的性能能预算监听，部署私密 webpageTest 环境，有助于快速构建测试用例。持续集成 CI/CD 工具链





## js 优化

> 以下基于 Chrome DevTools 分析

- JS Profiler(profiler)
  - 使用 requestAnimationRequest(rAF) 动画效果用此异步操作，通过系统调度保证执行时机，动画实时性保证
  - 降低代码复杂度或使用 Web Workers (对于持续计算型 JS 代码会阻塞主线程的执行，容易阻塞主线程上的渲染工作导致帧丢失)开启其他线程让这些 JS 代码在 worker 线程上面运行，缺点肯定就是占用多一点点内存了
- Render （style && Layout）
  - 降低样式计算和复杂度
  - 避免大规模复杂布局(频繁触发布局计算性能下降)， 也可以使用 flexbox 代替老式布局，提高性能(摘录一部分)
  - 减少重排重绘，尽量使用合成，分块等在合成线程中进行的操作， 不占用主线程执行
  - 此块结合极客时间 浏览器 CSSOM 渲染流水线下的分层合成机制食用
  - 优化绘制，提升元素渲染层为合成层， 通过合成机制减少绘制过程，但是内存会增加， 使用 opacity transform 等在合成线程上的操作， 可以开启 GPU 加速，减少绘制区域， 降低绘制复杂度
  - 渲染层合并，对页面中 DOM 元素绘制在多层中进行，每层完成绘制后，浏览器按照所有曾合理顺序合并成一个图层
    - 合成层优点:
      1. 合成层位图交给 GPU 合成(合成线程),显卡处理图像优势， 前后缓冲区替换
      2. 需要重绘时，只需要重绘自身，不影响其他层
      3. opacity transform 不会触发 layout 和 paint
      4. fixed 等合成层，移动时只在当前图层移动，不影响其他图层和 layout，不会触发 paint
    - 提升合成层最好方式: css: will-change
    - 合理管理合成层，因为还是存在纹理上传等问题，就是从 cpu 内存移动到 gpu 内存这段过程，还有提供 gpu 内存处理纹理问题
    - 防止层爆炸， 虽然浏览器有层压缩机制，但是极端情况还是存在，显式生命的合成层有可能会产生额外的合成层， 出现层爆炸(安卓某些版本浏览器存在)



## summary 

- web 应用渐进增强的过程也带来了很多性能问题，优化方法技巧和工具越来越丰富，记录的一部分内容也够喝上一壶了，时机场景化中的性能优化问题和解决方案还有非常的多