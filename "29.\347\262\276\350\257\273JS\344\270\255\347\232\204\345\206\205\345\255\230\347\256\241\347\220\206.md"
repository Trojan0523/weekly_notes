## **029.精读《JS 中的内存管理》.md**

> 深入了解 JS 中的一些工作原理才能写出更好的代码和程序，通过养成一些习惯避免内存泄漏问题

- 内存生命周期
  - 分配内存 --> 使用内存 --> 释放内存



### JS 中的内存回收

- 引用： 垃圾回收算法

- 引用计数垃圾收集： 对象是否有其他对象引用到

  ```js
  let arr = [1,2,3,4]
  arr = null; // 没有被引用，arr被自动回收
  ```

- 限制： 循环引用： 两个对象被创建并且相互引用，被调用后不会离开函数作用域，但是他们至少有相互一次引用，所以不会回收

  ```js
  function f() {
      var o1 = {}
      var o2 = {}
      o1.p = o2 // o1 引用o2
      o2.p = o1 // o2 引用o1
  }
  ```

- 现代浏览器采用 `标记清除算法`

  - 算法把`对象是否不在需要`简化定义为`对象是否可以获得`
  - 假定设置一个叫根 root 的对象，定期垃圾回收从根开始，找所有根开始引用的对象，然后找到这些对象引用的对象，找到所有可以获得的对象和不可获得的对象

- 自动 GC 问题

  - GC 执行时机不清楚，GC 没运行的时候我们需要在程序中手动操作触发内存回收

- 内存泄漏: 不在被需要的内存无法被释放

  - 全局变量

    ```js
    function foo(arg) {
    	bar = 'could not recycle';
    }
    ```

    - 意外创建全局变量状况

      ```js
      function foo() {
          this.var1 = 'potential accidental global'
      }
      ```

  - 未销毁的定时器和回调函数

    - 使用到观察者模式都会提供回调方法，调用这些回调要记得进行回收

      ```js
      var serverData = loadData();
      setInterval(function() {
          var renderer = document.getElementById('renderer');
          if(renderer) {
              renderer.innnerHTMl = JSON.stringify(serverData)
          }
      }, 5000)
      ```

- 闭包

  - 一个内部函数有权访问其外部函数作用域的变量，存在引用，也会造成内存泄漏

    ```js
    var theThing = null;
    var replaceThing = function() {
        var orginalThing = theThing;
        var unused = function() {
            if(orginalThing) { // 'orginalThing'的引用
                console.log('hi')
            };
            theThing = {
                longStr: new Array(10000).join('*'),
                someMethod: function() {
                    console.log("message")
                }
            }
        }
    }
    setInterval(replaceThing, 5000)
    ```

- DOM 引用

  - DOM 引用保存在一个数组或者 Map 中，虽然对 DOM 引用的节点元素进行移除，但是依然有节点元素的引用，无法对其进行垃圾回收

    ```js
    var elements = {
    image: document.getElementById('image')
    }
    function doStuff() {
        elements.image.src = 'http://www.example.png'
    }
    function removeImage() {
        document.body.removeChild(document.getElementById('image'))
        // 对#image仍有一个引用，elements，所以无法被内存回收
    }
    ```



### 精读

- ES6 引入 WeakSet 和 WeakMap 两个新概念，解决引用造成的内存回收问题，这两个对值引用可以忽略不计，弱引用，内存回收机制不考虑
- JS 类高级语言隐藏了内存管理功能，但是垃圾回收对性能的影响还是相当大的，还是需要自己管理一下内存， 由于 JS 没有暴露相关显式内存管理接口，所以导致写优化垃圾回收代码看起来不优雅甚至不可读
- 内存敏感场景，nodejs 代码做严格检查和优化。谨慎使用 DOM 操作，使用完之后记得销毁。主动删除没有业务意义的常量和变量，避免提前优化过早优化，保证代码可读性情况下使用性能监控工具，查看调用栈定位问题



## summary

- 谨慎内存泄漏场景