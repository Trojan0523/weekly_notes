## **59.精读《如何利用 Nodejs 监听文件夹》**

> 现成的库有 `chokidar` 和 `node-watch` 实现原理可以往下走



### 概述

- 使用`fs`内置函数`watchfile`:

  ```javascript
  fs.watchFile(dir, (curr, prev) => {})
  ```

- 使用`fs`另外一个内置函数`watch`

  ```javascript
  fs.watch(dir, (event, filename) => {})
  ```

  - watch 通过操作系统提供的文件更改通知机制，在 Linux 下使用 inotify，macos 下使用 FSEvents, windows 下使用 ReadDirectoryChangesW，而且可以监听目录的变化（不同平台下 fs.watch 的桂策不同，因为使用各平台提供的 api，无法保证 api 实现的统一性）

  - （实时修改保存功能 Webstrom）当我们修改一个文件时，回调执行了四次，原因是文件被写入的时候触发了多次写操作，即使保存一次。通常我们不需要那么敏感的回调感应，所以一次保存就是一次修改

    ```javascript
    fs.watch(dir, (event, filename) => {
      if(filename && event === 'change') {
        console.log(`${filename} has been changed`);
      }
    });
    ```

- 优化方式 1： 对比文件修改时间

  - 基于`fs.watch`增加对修改时间的判断

    ```javascript
    let previousMTime = new Date(0)
    
    fs.watch(dir, (event, filename) => {
      if(filename) {
        const stats = fs.statSync(filename);
        if(stat.mtime.valueof() === previousMTime.valueof()) {
          return ;
        }
        previousMTime = stat.time;
        console.log(`${filename} has been changed`)
      }
    })
    ```

- 优化方式 2： 校验文件 md5 (log 从 3 个下降到了两个，潜在多出原因可能是文件在保存过程中系统会触发多个回调时间，或者存在中间态)

  ```javascript
  let md5Previous = null;
  fs.watch(dirm (event, filename) => {
    if(filename) {
      const md5Current = md5(fs.readFileSync(buttonPressesLogFile));
      if(md5Current === md5Previous) {
        return;
      }
      md5Previous = md5Current;
     console.log(`${filename} has been changed`)
    }
  })
  ```

- 优化方式 3： 加入延迟机制 （尝试延迟 100ms 进行判断以避开中间态，可以使用 debounce 函数控制触发频率，将触发频率修正）

  ```js
  let fsWait = false
  fs.watch(dir, (event, filename) => {
    if(filename) {
      if(fsWait) return;
      fsWait = setTimeout(() => {
        fsWait = false
        // fn.apply(context, arguments)
      })
      console.log(`${filename} has been changed`)
    }
  })
  ```

  - 结合 MD5 与延迟机制共同作用，才能得到相对精准的结果

    ```js
    let md5Previous = null
    let fsWait = false
    fs.watch(dir, (event, filename) => {
      if(filename) {
        const md5Current = md5(fs.readFileSync(dir))
        if(faWait) return 
        fsWait = setTimeout(() => {
          fsWait = false
        }, 100)
        if(md5Current === md5Previous) {
          return;
        }
        md5Previous = md5Current;
        console.log(`${filename} has been changed`)
      }
    })
    ```



### 精读

- 对于实现文件夹监听的基本方式，各平台实现的原生 API 都不太靠谱，但是这也是我们监听文件的唯一手段，所以需要进行一系列不同平台的优化和边界条件的优化

- 实际场景需要区分文件夹与文件、软连接、读写权限等等

- 生产环境的库，基本使用 50-100ms 解决重复触发的问题

- 上文两个三方库都是大量使用了文中的技巧，加上以上的实际场景条件

  - 判断文件写入操作是否完毕，也通过轮询的方式（第三方库都采取不信任操作系统回调的方式，根据文件信息完全重写判断逻辑）

    ```js
    function awaitWriteFinish() {
      // ...
      fs.stat(
      fullPath,
      function (err, curStat) {
        // ...
        if(prevStat && curStat.size != prevStat.size) {
          this._pendingWrites[path].lastChange = now;
        }
        if(now - this._pendingWrites[path].lastChange >= threshold) {
          Reflect.deleteProperty(this._pendingWirtes, path)
          awfEmit(null, curStat)
        } else {
          timeoutHandler = setTimeout(awaitWriteFinish.bind(this, curStat), this.options.awaitWriteFinish.pollInterval)
        	};
      	}
      ).bind(this)
    }
    ```

    - 需要统一重写文件的”写入“、”删除“、”修改“等逻辑，才能保证全平台的兼容性



## summary

- 利用 nodejs 监听文件夹变化很容易，但是提供准确的回调很难，原因：
  1. 磨平操作系统之间的差异性，需要结合 fs.watch 的同时格外增加一些校验机制和延时机制
  2. 分清楚操作系统和用户预期，比如编辑器的额外操作， 操作系统的多次读写都应该被忽略，用户预期不会那么敏感，可以缩小短时间内的调用触发
  3. 兼容性、权限、软连接等等因素都应该考虑进去，`fs.watch`并不是一个开箱即用的工程 api