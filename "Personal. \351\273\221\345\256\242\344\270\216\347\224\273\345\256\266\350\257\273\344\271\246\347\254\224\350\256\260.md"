# # Personal. 黑客与画家读书笔记

- 格雷厄姆一套完整的创业哲学，公式如下，我觉得可能公司的上层老板们可能会比较认可：
  
  - 搭建原型(MVP)
  
  - 上线运营(别管bug)
  
  - 收集反馈
  
  - 调整产品
  
  - 成长壮大

- 为什么要最小可行性方案原型呢，是因为其实快速做出来一个能用的东西能更快感知这个创意是否能落地，这样项目才有可能更早的不黄(活下去最重要)

- make something people want, then i make something people want as graduation gift

- 以前创业很昂贵，你不得不找到投资人才开始创业，现在唯一的门槛就是勇气，我们可以认真想一想，如果有一个不错的点子，刚好你又是程序员，只要有一台电脑，一台服务器，一个IDE，随时可以把想法快速迭代下来进行验证，创业成本约等于你和你的partner的时间成本，试错成本非常低。

- 黑客与画家更多写的不是技术，而是技术背后的思想，正确的思想是不会过时的。

- 大多数创作者是为人类用户而创作。为了吸引用户，你必须了解用户需要什么。换位思考就显得很重要了。

- 如果你想要清晰的思考，就必须远离人群，但走的越远，你的处境就越困难，受到的阻力也就越大，因为你没有迎合社会习俗，而是一步步的与他背地而驰。

- 从丑陋到聪明，他们之间存在一种连续性的渐变。一念之间，颠倒相差。

- 数据在客户端和服务端走一转的来回时间耗时 0.1 秒，所以与用户密集互动的软件会将数据处理部分放到桌面端(换算到 Web，其实就是交互行为频繁的行为放前端处理，对于数据存储和别端运行的数据行为放置服务端处理)

- 互联网软件其实根本没有版本这个概念，因为这种软件是可以连续性渐变的。

- 函数式编程能避免一些副作用，虽然很难用纯粹的函数式编程完成整个程序，但是可以用来编写一些比较重要的部分，使得这些部分易于调试，因为他们在函数内部没有自身的状态，完全以一种旁观者的方式去运行你的逻辑，很纯粹，非常便于不断进行小幅的修改和调试。

- 格雷厄姆初始创立公司时只有三个程序员，如果公司要卖掉，就必须把规模扩大，没有公司愿意收购只有三个程序员的公司(笑)，解决办法就是雇更多的人，公司内创设项目让他们去做。这能让投资者认为这公司是充满活力，项目不断的。

- 重点: 只要你还在很活跃的开发产品，就免不了要亲自负责去做这个系统管理，没有其他可能，不要妄想写完代码，往gitlab提了，发了版就完事了，因为互联网是活的，每时每刻都会在服务器上运行，一个严重的bug可能不止影响一个用户，有可能是所有正在使用的用户，这种严重的问题就必须立马修复，不然损失会非常大。

- 只有懂得设计的黑客，才能设计软件，不能交给对软件一知半解的设计师。如果你不打算自己动手设计和开发，那就不要创业。(这在flomo上面体现的淋漓尽致，创始人少楠产品经理出身，初始时一句编码都不会，但是创业的想法迫使他自己要去主动了解并开发自己脑海中的产品)

- 为什么如此多的创业公司在开发新药或者计算机软件 ，而不是在卖玉米油或者洗衣粉？(当今创业公司尤其是中国，技术型创业公司往往更难活下去，所以人们转向了线上零售型领域进行创业，本质上其实没解决什么问题，只是创造了需求让人们购买商品)

- 当我们讨论收入分配(更多的是指统计学上的收入分布)公平时，我们还要问问收入从何而来，收入背后的财富到底是谁生产出来的，如果收入完全依据个人创造的财富数量而分配，那么结果可能是不平均的，也很难说是不公平的。

- 技术对生产效率的提高不是线性的，而可能是多项式分布的，一开始可能会有多重因素的影响，导致提高不明显，随着时间的推移，这些因素会慢慢消失，带来的效率的提高会进一步伸展开来。

- 设计者的品味
  
  - 好设计是永不过时的设计。只要没有错误，每个数学证明都是永不过时的。
  
  - 好设计是解决主要问题的设计。
  
  - 好设计是启发性的设计。
  
  - 好设计通常是有点趣味性的设计。
  
  - 好设计是艰苦的设计。
    
    - 并非所有的痛苦都是有益的，世界上有有益的痛苦，也有无益的痛苦。你所需要的是咬牙向前冲刺的痛苦，而不是脚被钉子扎破的痛苦。
  
  - 好设计是看似容易的设计。
  
  - 好设计是对称的设计。
  
  - 好设计是模仿大自然的设计。
  
  - 好设计是一种再设计。
    
    - 很少有人一次就把事情做对。专家的做法是先完成一个早期原型，然后提出修改计划，最后把早期原型扔掉。
    
    - 扔掉早期原型是需要信心的。你要有本事看出什么地方可以改进，而且充分相信自己的判断。
    
    - 犯错误是很正常的事情。你不要把犯错看成灾难，要勇于承认、勇于改正。做软件也是，开源软件因为公开承认自己会有bug，才会有更多的人参与进来改正，使得代码的bug量减少。
  
  - 好设计是能够复制的设计。
    
    - 把事情做对比原创更重要。
    
    - 等到你逐渐对一件事产生热情的时候，就不会满足于模仿了，你的品味会进入第二阶段，开始自觉地进行原创。
  
  - 好设计常常是大胆的设计。

- 单单是无法容忍丑陋的东西还不够，只有对这个领域非常熟悉，你才可能发现哪些地方可以动手改进。这一点很重要，你必须锻炼自己，只有在成为某个领域的专家后，你才会听到心里有一个细微的声音说: 这样的解决太糟糕了，一定有更好的选择。不要忽视这种声音。要培育他们。做出优秀作品的秘诀就是: 非常严格的品味, 再加上实现这种品味的能力。

- 从图灵等价的角度看，所有语言都是一样强大的，但是这对程序员没有意义，所以程序员只会选择最适合的语言做开发而不是最强大的语言进行开发。因为市场不等人。

- 唯一洞悉所有语言优劣的人必然是最强大的那种语言的人。

- 对于制造工具的人来说，总是会有用户以违背你本意的方式使用你的工具。如果你制造的是编程语言这样高度组合的系统更是如此，黑客会用你做梦都想不到的方式改动你的语法模型。作者的建议是，让他们这么干把，也应该给他们创造便利，尽可能将更多语言内部的东西暴露在他们面前，创造更多的可能~~

- 开发大型程序另一个方法就是从一次性程序开始，然后不断地改进。跟yak  shaking（剪羊毛）一样，只关注一小块，以后有新需求出来再迭代。

- 帕金森定律一种原始表达形式是: "工作总是 到最后一刻才会完成", 后来引申到计算机领域就变成了数据总是会填满所有空间。更一般性的总结则是对一种资源的需求总是会消耗光这种资源的所有供应。

- "最好的文字来自不停地修改"。软件开发也同样适用，设计一样东西，最重要的一点就是要经常"再设计"，编程尤其如此，再多的修改都不过分。

- 在软件领域，贴近用户的设计思想被归纳为"弱即是强"模式，这个模式其实包含了好几种不同的思想，其中一点就是如果你在设计某种新东西，就应该尽快拿出原型，听取用户的建议。

- 另外一种软件设计模式是"万福玛利亚"模式，他不要求尽快拿出原型，然后再逐步优化，他的观点是你一你改改等到完整的成品出来以后一下子隆重的推向市场。比较少见，毕竟市场都是抢占式的，短期内得不到市场的验证其实产品就已经失败了一半。

- 大多数情况，优秀设计的前提是你也必须喜欢这种产品，不然你不会对设计有兴趣，更别说情绪高昂了，为了把产品设计好，你必须觉得: '这个产品真的太棒了，我一定要设计好'， 而不是想着这种垃圾玩意，只有傻瓜才喜欢，随便设计一下就好了。。
